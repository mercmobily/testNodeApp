<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html style="height: 100%" xmlns="http://www.w3.org/1999/xhtml">
   <head>
      <meta http-equiv="content-type" content="text/html;charset=utf-8" />
      <meta http-equiv="Cache-Control" content="no-cache" />
      <meta http-equiv="Pragma" content="no-cache" />
      <title>SUBMIT AUTOMATICO -- PAGINA PRINCIPALE</title>
   </head>

   <script type="text/javascript">

  
  output = '';


  function consolelog(){
    var o2;
    var d = new Date();
    output += d + ' ' + d.getMilliseconds();

    for( var i = 0; i < arguments.length; i ++ ){
      var o = arguments[ i ];

      
      if( typeof o === 'object' ){
        if( o.nodeName ){
      
          var tmp = document.createElement("div");
          tmp.appendChild( o.cloneNode(true) );
          o2 = tmp.innerHTML;

        } else {
          try {
            o = JSON.stringify( o );
          } catch( e ){

            try {
              o2 = o.toString() + ( o.length ? ' ' + o.length : '' );

            } catch( e ){
              o2 = '[???]';
            }

          }
        }
      } else {
        o2 = o;
      } 

      output = output + ' ' + o2;
    }
    output += '\n';
    console.log.apply( console, arguments );
  } 

  window.onload = function(){

   	function atLeastTen(){

   	  for( var i = 0; i < arguments.length; i ++) {
   			var v = arguments[ i ];
   			consolelog("CHECKING V:", v );
   			if( v < 10 ) return false;
   		}	
   		return true;
   	}

   	function elementVisible( element ){
 			var rect = element.getBoundingClientRect();

      consolelog("Checking if", element, "is visible..." );
 			consolelog("ClientRect is:", rect );
   		if( atLeastTen( element.clientWidth, element.clientHeight, element.offsetWidth, element.offsetHeight, element.scrollWidth, element.scrollHeight, rect.height, rect.width ) && element.style.visibility !== 'hidden'){
   			consolelog("Element is visibile!");
   				return true;
   		} else {
   			consolelog("Element is invisible!");   			
   			return false;
   		}
   	}

   	function attemptSubmit(){
   		consolelog("Attempting submit!");

      //var formsCollection = iframeNode.contentDocument.getElementsByTagName("form");
      var formsCollection = iframeNode.contentDocument.forms;

      consolelog( "Forms: ", formsCollection);

      // Go through each form, and skip the bad ones (one of the sizes is 0, or visibility is hidden)
   		for(var i = 0; i < formsCollection.length; i ++){
   			var form = formsCollection[ i ];

      	consolelog("Working on form: ", form );

   			if( elementVisible( form )){

   				consolelog("Form is visible!");   		  	

  				var inputsCollection = form.getElementsByTagName( 'input' );

          // Go through each form, and skip the bad ones (one of the sizes is 0, or visibility is hidden)
   	    	for(var j = 0; j < inputsCollection.length; j ++){
   			    var input = inputsCollection[ j ];

     				consolelog("Input element:", input );

     				if( elementVisible( input ) && input.type === 'text' ){
     					consolelog("Input element is good!");
     					input.value = formNode.code.value;
     					form.submit();
              return true;
     				}

   				}
   			
   		  } else {
   				consolelog("Form is invisible!");   		  	
   		  }

   		};
      return false;
   	};

   	var status = "EMPTY"; // FIRST, RELOADING, CHANGED
   	var contents = '';

    consolelog("MAIN contents loaded!");

    //iframeNode.addEventListener('DOMFrameContentLoaded', function(){
    iframeNode.addEventListener('load', function(){
    //iframeNode.addEventListener('DOMContentLoaded', function(){
    //iFrameReady( iframeNode, function(){

    	consolelog("Iframe loaded!");

    	switch( status ){

    		case 'EMPTY':
    		  // Nothing should happen here
    		break;

    		case 'CHANGED':
    		  consolelog("This should now be the result message")
    		  // Nothing should happen here
    		break;

    		case 'FIRST':
    		  consolelog("Status changed to RELOADING")
          status = 'RELOADING';
          var serializer = new XMLSerializer();
          contents = serializer.serializeToString( iframeNode.contentDocument );
          iframeNode.contentWindow.location.reload();
    		break;

    		case 'RELOADING':
          var serializer = new XMLSerializer();
          var newContents = serializer.serializeToString( iframeNode.contentDocument );
          if( contents == newContents ){
            iframeNode.contentWindow.location.reload();
          } else {
            consolelog("Contents have changed! New contents:");
            consolelog( newContents );
      		  consolelog("Status changed to CHANGED")
      		  status = 'CHANGED';

      		  attemptSubmit();
          }

    		break;
    	}
    });

    formNode.addEventListener('submit', function( e ){
      e.preventDefault();
      if( formNode.url.value === '' ){
      	consolelog('Status changed to EMPTY');
      	status = 'EMPTY';
      	contents = '';
        iframeNode.src ='';      	
      } else {
      	consolelog('Status changed to FIRST');
      	status = 'FIRST';
      	contents ='';
        iframeNode.src =formNode.url.value;      	
      }
    });
  };


  function params(object) {
    var encodedString = '';
    for (var prop in object) {
      if (object.hasOwnProperty(prop)) {
        if (encodedString.length > 0) encodedString += '&';
        encodedString += ( encodedString.length > 0 ? '&' : '' ) + encodeURI(prop + '=' + object[prop]);
      }
    }
    return encodedString;
  }

  function sendLogs(){

    dataButton.disabled = true;

    var xmlhttp = new XMLHttpRequest();
    xmlhttp.timeout = 10000;
  
    xmlhttp.ontimeout = function(){
      dataButton.disabled = false;
      alert('Connection timed out!' );
    }
    xmlhttp.onreadystatechange = function() {

      if( xmlhttp.readyState == XMLHttpRequest.OPENED ) {
        xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        //xmlhttp.setRequestHeader("Content-length", params.length);
      }

      if (xmlhttp.readyState == XMLHttpRequest.DONE ) {
        dataButton.disabled = false;
        if(xmlhttp.status == 200 ){
         alert("Data submitted successfully!");
        }
        else  {
          alert('There was an unexpected return code: ' + xmlhttp.status );
        }
      }
    }

    xmlhttp.open("POST", "/app/data_add", true);
    xmlhttp.send( params( { code: formNode.code.value, url: formNode.url.value, added: new Date(), data: output }));
  }

   </script>

   <!-- NOTE: Eventually, changing "url" will change the iframe source -->

   <body style="height:90%;">

     <form id="formNode" style="display:inline-block">
       <input name="code" type="text" size="20" value="CODE">
       <input name="url" type="text" size="20%" value="http://">
       <input type="submit" >
     </form>

    <input style="display:inline-block" id="dataButton" type="button" value="send logs" onclick="sendLogs()">

    <div style="float: right;display:inline-block;"><a href="/app/data">Data log</a></div>
    
    <div style="height:100%">
      <iframe id="iframeNode" style="width: 100%; height:100%;" src="">
    </div>
   </body>
</html>